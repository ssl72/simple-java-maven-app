name: Upload SARIF

on:
  push:
    branches:
      - ci

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    steps:
      # This step checks out a copy of your repository.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the list of changed files
        id: changed-files
        run: |
          # 列出变动的文件
          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          echo "FILES=${FILES}" >> $GITHUB_ENV

      - name: Fetch Bearer Token
        run: |
          RESPONSE=$(curl -k -X POST -H "Authorization: token ${{ secrets.BLACK_DUCK_API_TOKEN }}" "${{ vars.BLACK_DUCK_URL }}/api/tokens/authenticate")
          BEARER_TOKEN=$(echo "${RESPONSE}" | jq -r '.bearerToken')
          echo "BEARER_TOKEN=${BEARER_TOKEN}" >> $GITHUB_ENV

      - name: Query for snippet matches
        run: |
          rm -rf .snippet-licenses
          mkdir .snippet-licenses
          FILEPATHS="${{ env.FILES }}"

          count=1
          for filepath in $FILEPATHS; do
            filename=$(echo "$filepath" | tr '/' '_')-snippet-analysis.json
            echo "File path: $filepath, File name: $filename"
            RES=$(curl -k --location --request POST "${{ vars.BLACK_DUCK_URL }}/api/snippet-matching" --header "Authorization: Bearer ${BEARER_TOKEN}" --header "Content-Type: text/plain" --data-binary "@$filepath")
            echo "$RES" | jq '.' > ".snippet-licenses/$filename"
            if [ $count -eq 10 ]
            then
              break
            fi
            ((count++))
          done

      - name: Generate SARIF Report
        run: |
          # Initialize the SARIF template
          echo '{
            "$schema": "http://json.schemastore.org/sarif-2.1.0",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Custom License Analyzer",
                    "version": "1.0",
                    "informationUri": "https://example.com"
                  }
                },
                "results": []
              }
            ]
          }' > sarif_template.json

          # Process each analysis result and append to the SARIF results
          for file in .snippet-licenses/*; do
            jq --arg file "$file" --slurpfile resultsArray "$file" '
              .runs[0].results += [
                $resultsArray[].snippetMatches[] | .[] | {
                  ruleId: (.licenseDefinition.spdxId // "unknown"),
                  level: "warning",
                  message: {
                    text: ("License match found: " + .licenseDefinition.licenseDisplayName)
                  },
                  locations: [
                    {
                      physicalLocation: {
                        artifactLocation: {
                          uri: $file,
                          uriBaseId: "%SRCROOT%"
                        },
                        region: {
                          startLine: .regions.sourceStartLines[0],
                          endLine: .regions.sourceEndLines[0]
                        }
                      }
                    }
                  ]
                }
              ]
            ' sarif_template.json > temp.json && mv temp.json sarif_template.json
          done

          # Rename the final SARIF file
          mv sarif_template.json snippet-analysis.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: snippet-analysis.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Snippet Analysis
